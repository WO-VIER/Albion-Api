@page "/"
@using Blazorise.Extensions
@using System.Text.Json
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
<h1>Hello, world!</h1>
<LineChart @ref="lineChart" TItem="double" />
@if (AlbionPlayers is null)
    {
        <p>AlbionPlayers is null</p>
    }else
    {
        <p>@AlbionPlayers.Count</p>
    }
@foreach (var variable in AlbionPlayers)
{
    <p>@variable.Name</p>
    <p>@variable.LifetimeStatistics.PvE.Total</p>
    <p>@variable.LifetimeStatistics.FishingFame</p>
    <p>@variable.LifetimeStatistics.Timestamp.Date</p>
}




@code {
    public LineChart<double> lineChart;
    public AlbionPlayer json { get; set; } //fresh data from the api or LocalStorage
    public List<AlbionPlayer> AlbionPlayers { get; set; } = new List<AlbionPlayer>(); // Micro DB 
    public string jsonString { get; set; }
    public string AlbionPlayerJsonString { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await GetJson();
                await GetAlbionPlayerData();
                Console.WriteLine(AlbionPlayers[0].Name);
                Console.WriteLine(AlbionPlayers[0].LifetimeStatistics.PvE.Total);
                Console.WriteLine(AlbionPlayers[1].Name);
                Console.WriteLine(AlbionPlayers[1].LifetimeStatistics.PvE.Total);

                AlbionPlayerJsonString = System.Text.Json.JsonSerializer.Serialize(AlbionPlayers);
                await PutAlbionPlayerData(AlbionPlayerJsonString);
                
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                throw;
            }

            StateHasChanged();
        }

        
    }
        

    public bool areEquals(AlbionPlayer player1, AlbionPlayer player2)
    {
        var jsonString1 = JsonSerializer.Serialize(player1);
        var jsonString2 = JsonSerializer.Serialize(player2);

        return jsonString1 == jsonString2;
    }


    /*protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            await UpdateChart();
            Console.WriteLine(AlbionPlayerJsonString);
            
            StateHasChanged();
            Console.WriteLine(AlbionPlayers.Count);
        }
    }*/

    async Task UpdateChart()
    {
        await lineChart.Clear();
        
        Dictionary<DateTime, double>pveData = AlbionPlayers.ToDictionary(p => p.LifetimeStatistics.Timestamp.Date, p => (double)p.LifetimeStatistics.PvE.Total);
        Dictionary<DateTime, double>fishingFameData = AlbionPlayers.ToDictionary(p => p.LifetimeStatistics.Timestamp.Date, p => (double)p.LifetimeStatistics.FishingFame);
        
        pveData = pveData.OrderBy(p => p.Key).ToDictionary(p => p.Key, p => p.Value);
        fishingFameData = fishingFameData.OrderBy(p => p.Key).ToDictionary(p => p.Key, p => p.Value);
       
        
        foreach (var VARIABLE in pveData)
        {
            Console.Write(VARIABLE.Value+" ");
        }
        
        
        foreach (var VARIABLE in fishingFameData)
        {
            Console.Write(VARIABLE.Value+" ");
        }
        /*var pveDataset = new LineChartDataset<double>
        {
            Label = "PvE Total",
            Data = pveData,
            BackgroundColor = ChartColor.FromRgba(255, 99, 132, 0.2f),
            BorderColor = ChartColor.FromRgba(255, 99, 132, 1f),
            Fill = true
        };

        var fishingFameDataset = new LineChartDataset<double>
        {
            Label = "Fishing Fame",
            Data = fishingFameData,
            BackgroundColor = ChartColor.FromRgba(54, 162, 235, 0.2f),
            BorderColor = ChartColor.FromRgba(54, 162, 235, 1f),
            Fill = true
        };*/

        // await lineChart.AddDataSet(pveDataset);
        // await lineChart.AddDataSet(fishingFameDataset);
        await lineChart.Update();
    }



    public async Task GetJson()
    {
        Console.WriteLine("Je suis dans GetJson");

        jsonString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "PlayerData");



        var numberOfDays = 0;

        if (jsonString!=null)
        {
            Console.WriteLine("Je vais deserialiser le json");
            json = System.Text.Json.JsonSerializer.Deserialize<AlbionPlayer>(jsonString);
            Console.WriteLine(json.LifetimeStatistics.Timestamp.Date);
            var dateDiff = DateTime.Now - json.LifetimeStatistics.Timestamp.Date;
            Console.WriteLine(dateDiff.Days);
            numberOfDays = dateDiff.Days;
            Console.WriteLine(numberOfDays);
        }

        if (numberOfDays>1 || jsonString is null)
        {
            Console.WriteLine("Je vais chercher le json dans l'api");
            await GetApi();
        }
    }

    public async Task GetApi()
    {
        Console.WriteLine("GetApi");
        // Ancien lien avec corsproxy.io = https://corsproxy.io/?https://gameinfo.albiononline.com/api/gameinfo/players/ryUIHMHeR4mG3df_dqpKbg
        //LeLonGun = https://gameinfo.albiononline.com/api/gameinfo/players/ftlaEJjnR8GtceE7u1U1xg
        //Farizak = https://gameinfo.albiononline.com/api/gameinfo/players/ryUIHMHeR4mG3df_dqpKbg
        jsonString = await HttpClient.GetStringAsync("https://gameinfo.albiononline.com/api/gameinfo/players/ftlaEJjnR8GtceE7u1U1xg");
        json = System.Text.Json.JsonSerializer.Deserialize<AlbionPlayer>(jsonString); // j'ai mon objet json
        //Console.WriteLine(jsonString);
        Console.WriteLine("");

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "PlayerData", jsonString);

        
        // Je Déserialise le fichier en une liste de
        // et vérifie la taille si =>10 je pop le premère
        // element ([0]first in first out)

       
    }

    // public async Task ApiV2()
    // {
    //     var jsonString = await HttpClient.GetStringAsync("https://gameinfo.albiononline.com/api/gameinfo/players/ryUIHMHeR4mG3df_dqpKbg");
    //     json = System.Text.Json.JsonSerializer.Deserialize<AlbionPlayer>(jsonString);
    //     Console.WriteLine(json.Name);
    //     await JSRuntime.InvokeVoidAsync("localStorage.setItem", "PlayerData", jsonString);
    //
    // }




    public async Task GetAlbionPlayerData()
    {
        try
        {
            

            AlbionPlayerJsonString = await System.IO.File.ReadAllTextAsync("wwwroot/AlbionData.json");
            var albionPlayer = System.Text.Json.JsonSerializer.Deserialize<List<AlbionPlayer>>(AlbionPlayerJsonString);
            if (albionPlayer.Count >= 10)
            {
                albionPlayer.RemoveAt(0);
            }
            
            AlbionPlayers = albionPlayer;
            
            if (json != null && !areEquals(AlbionPlayers.Last(), json))
            {
                Console.WriteLine("Les deux objets ne sont pas égaux, je peux ajouter à la liste");
                AlbionPlayers.Add(json);
            }
            else
            {
                Console.WriteLine("Les deux objets sont égaux, pas besoin d'ajouter à la liste");
            }


        }
        catch (Exception e)
        {
            Console.WriteLine("Erreur lors de la lecture du fichier AlbionData.json ou de la désérialisation du JSON.");
            Console.WriteLine(e);
            // Initialisez AlbionPlayers à une liste vide pour éviter les problèmes ultérieurs.
            AlbionPlayers = new List<AlbionPlayer>();
        }
    }

    public async Task PutAlbionPlayerData(string jsonString)
    {
        //Je vais lire le fichier AlbionData.json
        try
        {
            await System.IO.File.WriteAllTextAsync("wwwroot/AlbionData.json", jsonString);

        }
        catch (Exception e)
        {
            Console.WriteLine("Pas de fichier AlbionData.json");
            Console.WriteLine(e);
            throw;
        }
    }
    
    
    

    



















    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse);
    public class All
    {
        public int Total { get; set; }
        public int Royal { get; set; }
        public int Outlands { get; set; }
        public int Avalon { get; set; }
    }

    public class Crafting
    {
        public int Total { get; set; }
        public int Royal { get; set; }
        public int Outlands { get; set; }
        public int Avalon { get; set; }
    }

    public class Equipment
    {
        public object MainHand { get; set; }
        public object OffHand { get; set; }
        public object Head { get; set; }
        public object Armor { get; set; }
        public object Shoes { get; set; }
        public object Bag { get; set; }
        public object Cape { get; set; }
        public object Mount { get; set; }
        public object Potion { get; set; }
        public object Food { get; set; }
    }

    public class Fiber
    {
        public int Total { get; set; }
        public int Royal { get; set; }
        public int Outlands { get; set; }
        public int Avalon { get; set; }
    }

    public class Gathering
    {
        public Fiber Fiber { get; set; }
        public Hide Hide { get; set; }
        public Ore Ore { get; set; }
        public Rock Rock { get; set; }
        public Wood Wood { get; set; }
        public All All { get; set; }
    }

    public class Hide
    {
        public int Total { get; set; }
        public int Royal { get; set; }
        public int Outlands { get; set; }
        public int Avalon { get; set; }
    }

    public class LifetimeStatistics
    {
        public PvE PvE { get; set; }
        public Gathering Gathering { get; set; }
        public Crafting Crafting { get; set; }
        public int CrystalLeague { get; set; }
        public int FishingFame { get; set; }
        public int FarmingFame { get; set; }
        public DateTime Timestamp { get; set; }
    }

    public class Ore
    {
        public int Total { get; set; }
        public int Royal { get; set; }
        public int Outlands { get; set; }
        public int Avalon { get; set; }
    }

    public class PvE
    {
        public int Total { get; set; }
        public int Royal { get; set; }
        public int Outlands { get; set; }
        public int Avalon { get; set; }
        public int Hellgate { get; set; }
        public int CorruptedDungeon { get; set; }
        public int Mists { get; set; }
    }

    public class Rock
    {
        public int Total { get; set; }
        public int Royal { get; set; }
        public int Outlands { get; set; }
        public int Avalon { get; set; }
    }

    public class AlbionPlayer
    {
        public double AverageItemPower { get; set; }
        public Equipment Equipment { get; set; }
        public List<object> Inventory { get; set; }
        public string Name { get; set; }
        public string Id { get; set; }
        public string GuildName { get; set; }
        public string GuildId { get; set; }
        public string AllianceName { get; set; }
        public string AllianceId { get; set; }
        public string AllianceTag { get; set; }
        public string Avatar { get; set; }
        public string AvatarRing { get; set; }
        public int DeathFame { get; set; }
        public int KillFame { get; set; }
        public double FameRatio { get; set; }
        public LifetimeStatistics LifetimeStatistics { get; set; }
    }

    public class Wood
    {
        public int Total { get; set; }
        public int Royal { get; set; }
        public int Outlands { get; set; }
        public int Avalon { get; set; }
    }

}
<p>@AlbionPlayerJsonString</p>
